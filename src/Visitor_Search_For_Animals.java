
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gresh
 */
public class Visitor_Search_For_Animals extends javax.swing.JFrame {
    private boolean isStaff;
    private String userEmail;
    private boolean searchPerformed;
    /**
     * Creates new form Search_For_Animals
     */
    public Visitor_Search_For_Animals(String email) {
        initComponents();
        this.isStaff = false;
        this.userEmail = email;
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        fillValues();
    }
    public Visitor_Search_For_Animals(boolean staff, String email) {
        initComponents();
        this.isStaff = true;
        this.userEmail = email;
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        fillValues();
    }
    
    public void fillValues() {
         Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals`";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_atlanta_zoo = new java.awt.Label();
        text_animals = new java.awt.Label();
        jButton_search = new javax.swing.JButton();
        text_name = new java.awt.Label();
        jTextField_name = new javax.swing.JTextField();
        text_age = new java.awt.Label();
        jSpinner_min = new javax.swing.JSpinner();
        text_min = new java.awt.Label();
        jSpinner_max = new javax.swing.JSpinner();
        text_max = new java.awt.Label();
        text_species = new java.awt.Label();
        jTextField_species = new javax.swing.JTextField();
        text_type = new java.awt.Label();
        jComboBox_type = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton_view = new javax.swing.JButton();
        text_exhibit = new java.awt.Label();
        jComboBox_exhibit = new javax.swing.JComboBox<>();
        jButton_home = new javax.swing.JButton();
        jCheckBox_age = new javax.swing.JCheckBox();
        jCheckBox_type = new javax.swing.JCheckBox();
        jCheckBox_name = new javax.swing.JCheckBox();
        jCheckBox_species = new javax.swing.JCheckBox();
        jCheckBox_exhibit = new javax.swing.JCheckBox();
        jButton_name_up = new javax.swing.JButton();
        jButton_name_down = new javax.swing.JButton();
        jButton_species_up = new javax.swing.JButton();
        jButton_species_down = new javax.swing.JButton();
        jButton_exhibit_up = new javax.swing.JButton();
        jButton_exhibit_down = new javax.swing.JButton();
        jButton_age_up = new javax.swing.JButton();
        jButton_age_down = new javax.swing.JButton();
        jButton_type_up = new javax.swing.JButton();
        jButton_type_down = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 500));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setResizable(false);

        text_atlanta_zoo.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_atlanta_zoo.setName(""); // NOI18N
        text_atlanta_zoo.setText("Atlanta Zoo");

        text_animals.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_animals.setName(""); // NOI18N
        text_animals.setText("Animals");

        jButton_search.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_search.setText("Search");
        jButton_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_searchActionPerformed(evt);
            }
        });

        text_name.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_name.setText("Name");

        text_age.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_age.setName(""); // NOI18N
        text_age.setText("Age");

        text_min.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_min.setName(""); // NOI18N
        text_min.setText("Min");

        text_max.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_max.setName(""); // NOI18N
        text_max.setText("Max");

        text_species.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_species.setText("Species");

        text_type.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_type.setName(""); // NOI18N
        text_type.setText("Type");

        jComboBox_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fish", "Amphibian", "Reptile", "Bird", "Mammal" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Species", "Exhibit", "Age", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton_view.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_view.setText("View");
        jButton_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_viewActionPerformed(evt);
            }
        });

        text_exhibit.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_exhibit.setText("Exhibit");

        jComboBox_exhibit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pacific", "Jungle", "Sahara", "Mountainous", "Birds" }));

        jButton_home.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_home.setText("Home");
        jButton_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_homeActionPerformed(evt);
            }
        });

        jButton_name_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_up.setText("▲");
        jButton_name_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_upActionPerformed(evt);
            }
        });

        jButton_name_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_down.setText("▼");
        jButton_name_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_downActionPerformed(evt);
            }
        });

        jButton_species_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_species_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_species_up.setText("▲");
        jButton_species_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_species_upActionPerformed(evt);
            }
        });

        jButton_species_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_species_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_species_down.setText("▼");
        jButton_species_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_species_downActionPerformed(evt);
            }
        });

        jButton_exhibit_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_exhibit_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_exhibit_up.setText("▲");
        jButton_exhibit_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exhibit_upActionPerformed(evt);
            }
        });

        jButton_exhibit_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_exhibit_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_exhibit_down.setText("▼");
        jButton_exhibit_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exhibit_downActionPerformed(evt);
            }
        });

        jButton_age_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_age_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_age_up.setText("▲");
        jButton_age_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_age_upActionPerformed(evt);
            }
        });

        jButton_age_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_age_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_age_down.setText("▼");
        jButton_age_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_age_downActionPerformed(evt);
            }
        });

        jButton_type_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_type_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_type_up.setText("▲");
        jButton_type_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_type_upActionPerformed(evt);
            }
        });

        jButton_type_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_type_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_type_down.setText("▼");
        jButton_type_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_type_downActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox_age)
                            .addComponent(text_animals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(text_age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(text_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(text_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jSpinner_min, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinner_max, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(116, 116, 116))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jCheckBox_name)
                                    .addComponent(jCheckBox_species)
                                    .addComponent(jCheckBox_exhibit))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(text_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(text_species, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(text_exhibit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField_species, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox_exhibit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(427, 427, 427)
                                .addComponent(jCheckBox_type)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(text_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton_species_up)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_species_down)
                                .addGap(38, 38, 38)
                                .addComponent(jButton_exhibit_up)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_exhibit_down)
                                .addGap(27, 27, 27)
                                .addComponent(jButton_age_up)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_age_down)
                                .addGap(39, 39, 39)
                                .addComponent(jButton_type_up)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_type_down))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(text_atlanta_zoo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_search)))
                        .addGap(97, 97, 97))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_view)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton_home)
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_name_up)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_name_down))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(48, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jButton_search)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(text_min, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(text_max, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(text_animals, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jSpinner_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinner_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(text_age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jCheckBox_age)))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jCheckBox_species)
                                    .addComponent(text_species, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField_species, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(text_exhibit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox_exhibit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jCheckBox_exhibit)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox_type)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(text_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_atlanta_zoo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox_name, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(text_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_name_up)
                    .addComponent(jButton_name_down)
                    .addComponent(jButton_species_up)
                    .addComponent(jButton_species_down)
                    .addComponent(jButton_exhibit_up)
                    .addComponent(jButton_exhibit_down)
                    .addComponent(jButton_age_up)
                    .addComponent(jButton_age_down)
                    .addComponent(jButton_type_up)
                    .addComponent(jButton_type_down))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_home)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton_view)
                        .addGap(116, 116, 116))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_searchActionPerformed
         String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_searchActionPerformed

    private void jButton_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_viewActionPerformed
        int[] rows = jTable1.getSelectedRows();
        int i = 0;
        String name;
        String species;
        Visitor_Animal_Detail ex;
        Staff_Log_Animal_Detail temp;
        while (i < rows.length) {
            name = (String)jTable1.getModel().getValueAt(rows[i],0);
            species = (String)jTable1.getModel().getValueAt(rows[i], 1);
            //display exhibit detail screen and pass name
            if (!isStaff) {
                ex = new Visitor_Animal_Detail(name, species, userEmail);
                ex.setVisible(true);
            } else {
                temp = new Staff_Log_Animal_Detail(name, species, userEmail);
                temp.setVisible(true);
            }
            i++;
        }
        if (rows.length > 0) {
            this.dispose();
        }
        
            
    }//GEN-LAST:event_jButton_viewActionPerformed

    private void jButton_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_homeActionPerformed
        if (!isStaff) {
            Visitor_Main main = new Visitor_Main(userEmail);
            main.setVisible(true);
            this.dispose();
        } else {
            Staff_Main main = new Staff_Main(userEmail);
            main.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jButton_homeActionPerformed

    private void jButton_name_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_upActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Name ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY Name ASC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_name_upActionPerformed

    private void jButton_name_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_downActionPerformed
       if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Name DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY Name DESC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_name_downActionPerformed

    private void jButton_species_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_species_upActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Species ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY Species ASC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_species_upActionPerformed

    private void jButton_species_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_species_downActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Species DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY Species DESC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_species_downActionPerformed

    private void jButton_exhibit_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exhibit_upActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY ExhibitName ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY ExhibitName ASC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_exhibit_upActionPerformed

    private void jButton_exhibit_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exhibit_downActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY ExhibitName DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY ExhibitName DESC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_exhibit_downActionPerformed

    private void jButton_age_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_age_upActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Age ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY Age ASC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_age_upActionPerformed

    private void jButton_age_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_age_downActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Age DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY Age DESC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_age_downActionPerformed

    private void jButton_type_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_type_upActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY AnimalType ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY AnimalType ASC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_type_upActionPerformed

    private void jButton_type_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_type_downActionPerformed
        if (searchPerformed) {
        String name = new String(jTextField_name.getText());
        boolean search_name = jCheckBox_name.isSelected();
        int name_pos = -1;
        String species = new String(jTextField_species.getText());
        boolean search_species = jCheckBox_species.isSelected();
        int species_pos = -1;
        String type = "" + jComboBox_type.getSelectedItem();
        boolean search_type = jCheckBox_type.isSelected();
        int type_pos = -1;
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        int exhibit_pos = -1;
        int min_age = (int)jSpinner_min.getValue();
        int max_age = (int)jSpinner_max.getValue();
        boolean search_age = jCheckBox_age.isSelected();
        int age_pos= -1;
        int numColumns = 1;
        //parameters
        if (min_age > max_age) {
            JOptionPane.showMessageDialog(null, "Min age must be smaller than max age");
        } else if (min_age < 0) {
            JOptionPane.showMessageDialog(null, "Min age must be greater than or equal to 0");
        } else if (!search_name && !search_type && !search_exhibit && !search_age && !search_species) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        }else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_age) {
                    sql += "Age >= ? AND Age <= ? AND ";
                    age_pos = numColumns;
                    numColumns+=2;
                }
                if (search_type) {
                    sql += "AnimalType = ? AND ";
                    type_pos = numColumns;
                    numColumns++;
                }
                if (search_exhibit) {
                    sql += "ExhibitName = ? AND ";
                    exhibit_pos = numColumns;
                    numColumns++;
                }
                if (search_species) {
                    sql += "Species = ? AND ";
                    species_pos = numColumns;
                    numColumns++;
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY AnimalType DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_age) {
                    stmt.setInt(age_pos, min_age);
                    stmt.setInt(age_pos + 1, max_age);
                }
                if (search_type) {
                    stmt.setString(type_pos, type);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                if (search_species) {
                    stmt.setString(species_pos, species);
                }
                //
                //System.out.println(sql);
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Animals` ORDER BY AnimalType DESC";
                
                stmt = con.prepareStatement(sql);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 5; j++) {
                        jTable1.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 5; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("Species");
                        } else if (j == 2) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 3){
                            value = myRs.getInt("Age");
                        } else {
                            value = myRs.getString("AnimalType");
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_type_downActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Animals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visitor_Search_For_Animals("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_age_down;
    private javax.swing.JButton jButton_age_up;
    private javax.swing.JButton jButton_exhibit_down;
    private javax.swing.JButton jButton_exhibit_up;
    private javax.swing.JButton jButton_home;
    private javax.swing.JButton jButton_name_down;
    private javax.swing.JButton jButton_name_up;
    private javax.swing.JButton jButton_search;
    private javax.swing.JButton jButton_species_down;
    private javax.swing.JButton jButton_species_up;
    private javax.swing.JButton jButton_type_down;
    private javax.swing.JButton jButton_type_up;
    private javax.swing.JButton jButton_view;
    private javax.swing.JCheckBox jCheckBox_age;
    private javax.swing.JCheckBox jCheckBox_exhibit;
    private javax.swing.JCheckBox jCheckBox_name;
    private javax.swing.JCheckBox jCheckBox_species;
    private javax.swing.JCheckBox jCheckBox_type;
    private javax.swing.JComboBox<String> jComboBox_exhibit;
    private javax.swing.JComboBox<String> jComboBox_type;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_max;
    private javax.swing.JSpinner jSpinner_min;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_name;
    private javax.swing.JTextField jTextField_species;
    private java.awt.Label text_age;
    private java.awt.Label text_animals;
    private java.awt.Label text_atlanta_zoo;
    private java.awt.Label text_exhibit;
    private java.awt.Label text_max;
    private java.awt.Label text_min;
    private java.awt.Label text_name;
    private java.awt.Label text_species;
    private java.awt.Label text_type;
    // End of variables declaration//GEN-END:variables
}
