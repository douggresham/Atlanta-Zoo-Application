
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gresh
 */
public class Visitor_Exhibit_History extends javax.swing.JFrame {
    String userEmail;
    boolean searchPerformed;
    /**
     * Creates new form Exhibit_History
     */
    public Visitor_Exhibit_History(String email) {
        initComponents();
        this.userEmail = email;
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        fillValues();
    }
    
    public void fillValues() {
        Connection con = null;
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ?";
            
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            
            ResultSet myRs = stmt.executeQuery();
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(myRs.getString("ExhibitName"));
                System.out.println(numVisits);
               
                     
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("ExhibitName");
                    } else if (j == 1) {
                        value = myRs.getObject("VisitTime");
                    } else {
                        value = numVisits;
                    }
                    jTable1.getModel().setValueAt(value, i, j);
                }
                
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}                                         
        }  
 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_atlanta_zoo1 = new java.awt.Label();
        text_exhibit_history = new java.awt.Label();
        text_name3 = new java.awt.Label();
        jTextField_name = new javax.swing.JTextField();
        text_date = new java.awt.Label();
        text_number_of_visits = new java.awt.Label();
        jSpinner_min = new javax.swing.JSpinner();
        text_min = new java.awt.Label();
        jSpinner_max = new javax.swing.JSpinner();
        text_max = new java.awt.Label();
        jButton1_search = new javax.swing.JButton();
        jButton1_home = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox_name = new javax.swing.JCheckBox();
        jCheckBox_date = new javax.swing.JCheckBox();
        jCheckBox_num_visits = new javax.swing.JCheckBox();
        jCalendar_date = new com.toedter.calendar.JCalendar();
        jButton_name_up = new javax.swing.JButton();
        jButton_name_down = new javax.swing.JButton();
        jButton_time_up = new javax.swing.JButton();
        jButton_time_down = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        text_atlanta_zoo1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_atlanta_zoo1.setName(""); // NOI18N
        text_atlanta_zoo1.setText("Atlanta Zoo");

        text_exhibit_history.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_exhibit_history.setName(""); // NOI18N
        text_exhibit_history.setText("Exhibits History");

        text_name3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_name3.setText("Name");

        text_date.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_date.setText("Date");

        text_number_of_visits.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_number_of_visits.setText("Number Of Visits");

        text_min.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_min.setName(""); // NOI18N
        text_min.setText("Min");

        text_max.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_max.setName(""); // NOI18N
        text_max.setText("Max");

        jButton1_search.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1_search.setText("Search");
        jButton1_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_searchActionPerformed(evt);
            }
        });

        jButton1_home.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1_home.setText("Home");
        jButton1_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_homeActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Time", "Number of Visits"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton_name_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_up.setText("▲");
        jButton_name_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_upActionPerformed(evt);
            }
        });

        jButton_name_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_down.setText("▼");
        jButton_name_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_downActionPerformed(evt);
            }
        });

        jButton_time_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_time_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_time_up.setText("▲");
        jButton_time_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_time_upActionPerformed(evt);
            }
        });

        jButton_time_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_time_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_time_down.setText("▼");
        jButton_time_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_time_downActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1_home)
                .addGap(80, 80, 80))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jCheckBox_date)
                                    .addComponent(jCheckBox_name))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(text_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(text_name3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCalendar_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(text_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jCheckBox_num_visits)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(text_number_of_visits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jSpinner_min, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(17, 17, 17)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jSpinner_max, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(23, 23, 23)
                                                        .addComponent(text_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(164, 164, 164)
                                                .addComponent(jButton1_search))))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(text_atlanta_zoo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86)
                                .addComponent(text_exhibit_history, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jButton_name_up)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_name_down)
                        .addGap(94, 94, 94)
                        .addComponent(jButton_time_up)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_time_down)))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text_atlanta_zoo1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text_exhibit_history, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jCheckBox_name)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(text_name3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(jCalendar_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox_date)
                                            .addComponent(text_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(text_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jSpinner_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(text_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jSpinner_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(text_number_of_visits, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(jCheckBox_num_visits)))
                                .addGap(93, 93, 93)
                                .addComponent(jButton1_search)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton_time_up)
                                .addComponent(jButton_time_down))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton_name_up)
                                .addComponent(jButton_name_down)))
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1_home)
                        .addGap(27, 27, 27))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_searchActionPerformed
        boolean search_name = jCheckBox_name.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        boolean search_num_visits = jCheckBox_num_visits.isSelected();
        int name_pos = -1;
        int date_pos = -1;
        int num_vsits_pos = -1;
        int numColumns = 2;
        String name = new String(jTextField_name.getText());
        Date dateTemp = jCalendar_date.getDate();
        Date date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        int min = (int)jSpinner_min.getValue();
        int max = (int)jSpinner_max.getValue();
        System.out.println(date);
        Connection con = null;
        if (min > max) {
            JOptionPane.showMessageDialog(null, "Min visits must be smaller than max visits");
        } else if (min < 0) {
            JOptionPane.showMessageDialog(null, "Min visits must be greater than or equal to 0");
        } else if (!search_name && !search_date && !search_num_visits) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? AND ";
            if (search_name) {
                sql += "ExhibitName = ? AND ";
                name_pos = numColumns;
                numColumns++;
            }
            if (search_date) {
                sql += "DATE(VisitTime) = ? AND ";
                date_pos = numColumns;
                numColumns++;
            }
            sql = sql.substring(0, sql.length() - 5);
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            if (search_name) {
                stmt.setString(name_pos, name);
            }
            if (search_date) {
                stmt.setObject(date_pos, date);
            }
            ResultSet myRs = stmt.executeQuery();
            searchPerformed = true;
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            int numVisits;
            while (myRs.next()) {
                System.out.println("Values Found1");
                numVisits = getNumVisits(name);
                System.out.println(numVisits); 
                System.out.println(min);
                System.out.println(max);
                if ((numVisits >= min && numVisits <= max) || !search_num_visits) {
                    System.out.println("EXECUTED");
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 1) {
                            value = myRs.getObject("VisitTime");
                        } else {
                            value = numVisits;
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                     i++; //move to next result
                }
               
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }                                            
        }              
    }//GEN-LAST:event_jButton1_searchActionPerformed
    public int getNumVisits(String exName) {
        Connection con = null;
        int num = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT Count(Visitor) FROM `ExhibitVisits` WHERE ExhibitName = ? AND Visitor = ?";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, exName);
            stmt.setString(2, userEmail);
            ResultSet myRs = stmt.executeQuery();
            myRs.next();
            num = myRs.getInt(1);
            System.out.println(num);
          
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }
        return num;
    }
    private void jButton1_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_homeActionPerformed
        Visitor_Main main = new Visitor_Main(userEmail);
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1_homeActionPerformed

    private void jButton_name_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_upActionPerformed
        if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        boolean search_num_visits = jCheckBox_num_visits.isSelected();
        int name_pos = -1;
        int date_pos = -1;
        int num_vsits_pos = -1;
        int numColumns = 2;
        String name = new String(jTextField_name.getText());
        Date dateTemp = jCalendar_date.getDate();
        Date date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        int min = (int)jSpinner_min.getValue();
        int max = (int)jSpinner_max.getValue();
        System.out.println(date);
        Connection con = null;
        if (min > max) {
            JOptionPane.showMessageDialog(null, "Min visits must be smaller than max visits");
        } else if (min < 0) {
            JOptionPane.showMessageDialog(null, "Min visits must be greater than or equal to 0");
        } else if (!search_name && !search_date && !search_num_visits) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? AND ";
            if (search_name) {
                sql += "ExhibitName = ? AND ";
                name_pos = numColumns;
                numColumns++;
            }
            if (search_date) {
                sql += "DATE(VisitTime) = ? AND ";
                date_pos = numColumns;
                numColumns++;
            }
            sql = sql.substring(0, sql.length() - 5);
            sql += "ORDER BY ExhibitName ASC";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            if (search_name) {
                stmt.setString(name_pos, name);
            }
            if (search_date) {
                stmt.setObject(date_pos, date);
            }
            ResultSet myRs = stmt.executeQuery();
            searchPerformed = true;
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(name);
                System.out.println(numVisits);
                if ((numVisits >= min && numVisits <= max) || !search_num_visits) {
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 1) {
                            value = myRs.getObject("VisitTime");
                        } else {
                            value = numVisits;
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }                                            
        }              
        } else {
            Connection con = null;
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? ORDER BY ExhibitName ASC";
            
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            
            ResultSet myRs = stmt.executeQuery();
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(myRs.getString("ExhibitName"));
                System.out.println(numVisits);
               
                     
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("ExhibitName");
                    } else if (j == 1) {
                        value = myRs.getObject("VisitTime");
                    } else {
                        value = numVisits;
                    }
                    jTable1.getModel().setValueAt(value, i, j);
                }
                
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}                                         
        }   
        }
    }//GEN-LAST:event_jButton_name_upActionPerformed

    private void jButton_name_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_downActionPerformed
        if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        boolean search_num_visits = jCheckBox_num_visits.isSelected();
        int name_pos = -1;
        int date_pos = -1;
        int num_vsits_pos = -1;
        int numColumns = 2;
        String name = new String(jTextField_name.getText());
        Date dateTemp = jCalendar_date.getDate();
        Date date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        int min = (int)jSpinner_min.getValue();
        int max = (int)jSpinner_max.getValue();
        System.out.println(date);
        Connection con = null;
        if (min > max) {
            JOptionPane.showMessageDialog(null, "Min visits must be smaller than max visits");
        } else if (min < 0) {
            JOptionPane.showMessageDialog(null, "Min visits must be greater than or equal to 0");
        } else if (!search_name && !search_date && !search_num_visits) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? AND ";
            if (search_name) {
                sql += "ExhibitName = ? AND ";
                name_pos = numColumns;
                numColumns++;
            }
            if (search_date) {
                sql += "DATE(VisitTime) = ? AND ";
                date_pos = numColumns;
                numColumns++;
            }
            sql = sql.substring(0, sql.length() - 5);
            sql += "ORDER BY ExhibitName DESC";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            if (search_name) {
                stmt.setString(name_pos, name);
            }
            if (search_date) {
                stmt.setObject(date_pos, date);
            }
            ResultSet myRs = stmt.executeQuery();
            searchPerformed = true;
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(name);
                System.out.println(numVisits);
                if (numVisits >= min && numVisits <= max || !search_num_visits) {
                     
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 1) {
                            value = myRs.getObject("VisitTime");
                        } else {
                            value = numVisits;
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }                                            
        }              
        } else {
            Connection con = null;
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? ORDER BY ExhibitName DESC";
            
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            
            ResultSet myRs = stmt.executeQuery();
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(myRs.getString("ExhibitName"));
                System.out.println(numVisits);
               
                     
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("ExhibitName");
                    } else if (j == 1) {
                        value = myRs.getObject("VisitTime");
                    } else {
                        value = numVisits;
                    }
                    jTable1.getModel().setValueAt(value, i, j);
                }
                
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}                                         
        }   
        }
    }//GEN-LAST:event_jButton_name_downActionPerformed

    private void jButton_time_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_time_upActionPerformed
        if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        boolean search_num_visits = jCheckBox_num_visits.isSelected();
        int name_pos = -1;
        int date_pos = -1;
        int num_vsits_pos = -1;
        int numColumns = 2;
        String name = new String(jTextField_name.getText());
        Date dateTemp = jCalendar_date.getDate();
        Date date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        int min = (int)jSpinner_min.getValue();
        int max = (int)jSpinner_max.getValue();
        System.out.println(date);
        Connection con = null;
        if (min > max) {
            JOptionPane.showMessageDialog(null, "Min visits must be smaller than max visits");
        } else if (min < 0) {
            JOptionPane.showMessageDialog(null, "Min visits must be greater than or equal to 0");
        } else if (!search_name && !search_date && !search_num_visits) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? AND ";
            if (search_name) {
                sql += "ExhibitName = ? AND ";
                name_pos = numColumns;
                numColumns++;
            }
            if (search_date) {
                sql += "DATE(VisitTime) = ? AND ";
                date_pos = numColumns;
                numColumns++;
            }
            sql = sql.substring(0, sql.length() - 5);
            sql += "ORDER BY VisitTime ASC";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            if (search_name) {
                stmt.setString(name_pos, name);
            }
            if (search_date) {
                stmt.setObject(date_pos, date);
            }
            ResultSet myRs = stmt.executeQuery();
            searchPerformed = true;
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(name);
                System.out.println(numVisits);
                if (numVisits >= min && numVisits <= max || !search_num_visits) {
                     
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 1) {
                            value = myRs.getObject("VisitTime");
                        } else {
                            value = numVisits;
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }                                            
        }              
        } else {
            Connection con = null;
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? ORDER BY VisitTime ASC";
            
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            
            ResultSet myRs = stmt.executeQuery();
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(myRs.getString("ExhibitName"));
                System.out.println(numVisits);
               
                     
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("ExhibitName");
                    } else if (j == 1) {
                        value = myRs.getObject("VisitTime");
                    } else {
                        value = numVisits;
                    }
                    jTable1.getModel().setValueAt(value, i, j);
                }
                
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}                                         
        }   
        }
    }//GEN-LAST:event_jButton_time_upActionPerformed

    private void jButton_time_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_time_downActionPerformed
        if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        boolean search_num_visits = jCheckBox_num_visits.isSelected();
        int name_pos = -1;
        int date_pos = -1;
        int num_vsits_pos = -1;
        int numColumns = 2;
        String name = new String(jTextField_name.getText());
        Date dateTemp = jCalendar_date.getDate();
        Date date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        int min = (int)jSpinner_min.getValue();
        int max = (int)jSpinner_max.getValue();
        System.out.println(date);
        Connection con = null;
        if (min > max) {
            JOptionPane.showMessageDialog(null, "Min visits must be smaller than max visits");
        } else if (min < 0) {
            JOptionPane.showMessageDialog(null, "Min visits must be greater than or equal to 0");
        } else if (!search_name && !search_date && !search_num_visits) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? AND ";
            if (search_name) {
                sql += "ExhibitName = ? AND ";
                name_pos = numColumns;
                numColumns++;
            }
            if (search_date) {
                sql += "DATE(VisitTime) = ? AND ";
                date_pos = numColumns;
                numColumns++;
            }
            sql = sql.substring(0, sql.length() - 5);
            sql += "ORDER BY VisitTime DESC";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            if (search_name) {
                stmt.setString(name_pos, name);
            }
            if (search_date) {
                stmt.setObject(date_pos, date);
            }
            ResultSet myRs = stmt.executeQuery();
            searchPerformed = true;
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(name);
                System.out.println(numVisits);
                if (numVisits >= min && numVisits <= max || !search_num_visits) {
                     
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("ExhibitName");
                        } else if (j == 1) {
                            value = myRs.getObject("VisitTime");
                        } else {
                            value = numVisits;
                        }
                        jTable1.getModel().setValueAt(value, i, j);
                    }
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }                                            
        }              
        } else {
            Connection con = null;
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
            "cs4400_group8",
            "l5sU95me");
            PreparedStatement stmt;
            String sql = "SELECT * FROM `ExhibitVisits` WHERE Visitor = ? ORDER BY VisitTime DESC";
            
            stmt = con.prepareStatement(sql);
            stmt.setString(1, userEmail);
            
            ResultSet myRs = stmt.executeQuery();
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable1.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                int numVisits = getNumVisits(myRs.getString("ExhibitName"));
                System.out.println(numVisits);
               
                     
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("ExhibitName");
                    } else if (j == 1) {
                        value = myRs.getObject("VisitTime");
                    } else {
                        value = numVisits;
                    }
                    jTable1.getModel().setValueAt(value, i, j);
                }
                
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}                                         
        }   
        }
    }//GEN-LAST:event_jButton_time_downActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visitor_Exhibit_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visitor_Exhibit_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visitor_Exhibit_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visitor_Exhibit_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visitor_Exhibit_History("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_home;
    private javax.swing.JButton jButton1_search;
    private javax.swing.JButton jButton_name_down;
    private javax.swing.JButton jButton_name_up;
    private javax.swing.JButton jButton_time_down;
    private javax.swing.JButton jButton_time_up;
    private com.toedter.calendar.JCalendar jCalendar_date;
    private javax.swing.JCheckBox jCheckBox_date;
    private javax.swing.JCheckBox jCheckBox_name;
    private javax.swing.JCheckBox jCheckBox_num_visits;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_max;
    private javax.swing.JSpinner jSpinner_min;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_name;
    private java.awt.Label text_atlanta_zoo1;
    private java.awt.Label text_date;
    private java.awt.Label text_exhibit_history;
    private java.awt.Label text_max;
    private java.awt.Label text_min;
    private java.awt.Label text_name3;
    private java.awt.Label text_number_of_visits;
    // End of variables declaration//GEN-END:variables
}
