
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gresh
 */
public class Admin_Search_For_Shows extends javax.swing.JFrame {
    private Date date;
    private boolean searchPerformed;
    /**
     * Creates new form Admin_Search_For_Shows
     */
    public Admin_Search_For_Shows() {
        initComponents();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        fillValues();
    }
    
    public void fillValues() {
        Connection con = null;
        try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows`";
                
                stmt = con.prepareStatement(sql);
                
                
                
                ResultSet myRs = stmt.executeQuery();
                
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("Name");
                    } else if (j == 1) {
                        value = myRs.getString("ExhibitName");
                    } else {
                        value = myRs.getObject("ShowTime");
                    }
                    jTable.getModel().setValueAt(value, i, j);
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }   
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_name = new java.awt.Label();
        jTextField_name = new javax.swing.JTextField();
        text_species = new java.awt.Label();
        text_date = new java.awt.Label();
        jComboBox_exhibit = new javax.swing.JComboBox<>();
        text_atlanta_zoo1 = new java.awt.Label();
        text_shows = new java.awt.Label();
        jButton1_remove_show = new javax.swing.JButton();
        jButton1_search1 = new javax.swing.JButton();
        jButton_home = new javax.swing.JButton();
        jCalendar_date = new com.toedter.calendar.JCalendar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jCheckBox_date = new javax.swing.JCheckBox();
        jCheckBox_name = new javax.swing.JCheckBox();
        jCheckBox_exhibit = new javax.swing.JCheckBox();
        jButton_name_up = new javax.swing.JButton();
        jButton_name_down = new javax.swing.JButton();
        jButton_exhibit_up = new javax.swing.JButton();
        jButton_exhibit_down = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 500));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setResizable(false);

        text_name.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_name.setText("Name");

        text_species.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_species.setText("Exhibit");

        text_date.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_date.setText("Date");

        jComboBox_exhibit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pacific", "Jungle", "Sahara", "Mountainous", "Birds" }));

        text_atlanta_zoo1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_atlanta_zoo1.setName(""); // NOI18N
        text_atlanta_zoo1.setText("Atlanta Zoo");

        text_shows.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_shows.setName(""); // NOI18N
        text_shows.setText("Shows");

        jButton1_remove_show.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1_remove_show.setText("Remove Show");
        jButton1_remove_show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_remove_showActionPerformed(evt);
            }
        });

        jButton1_search1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1_search1.setText("Search");
        jButton1_search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_search1ActionPerformed(evt);
            }
        });

        jButton_home.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_home.setText("Home");
        jButton_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_homeActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Exhibit", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);

        jButton_name_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_up.setText("▲");
        jButton_name_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_upActionPerformed(evt);
            }
        });

        jButton_name_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_down.setText("▼");
        jButton_name_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_downActionPerformed(evt);
            }
        });

        jButton_exhibit_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_exhibit_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_exhibit_up.setText("▲");
        jButton_exhibit_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exhibit_upActionPerformed(evt);
            }
        });

        jButton_exhibit_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_exhibit_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_exhibit_down.setText("▼");
        jButton_exhibit_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exhibit_downActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text_atlanta_zoo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(121, 121, 121)
                        .addComponent(text_shows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                        .addComponent(jButton1_search1)
                        .addGap(107, 107, 107))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1_remove_show)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_home)
                        .addGap(44, 44, 44))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox_name)
                            .addComponent(jCheckBox_exhibit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(282, 282, 282)
                                .addComponent(jCheckBox_date)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(text_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(text_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(text_species, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox_exhibit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton_name_up)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_name_down)
                        .addGap(95, 95, 95)
                        .addComponent(jButton_exhibit_up)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_exhibit_down)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCalendar_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(text_shows, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(text_atlanta_zoo1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jButton1_search1)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(text_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(text_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBox_date, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox_name))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(text_species, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox_exhibit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox_exhibit, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton_name_down)
                                    .addComponent(jButton_name_up)))
                            .addComponent(jButton_exhibit_down, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton_exhibit_up, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCalendar_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 66, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1_remove_show)
                    .addComponent(jButton_home))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1_remove_showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_remove_showActionPerformed
        int[] rows = jTable.getSelectedRows();
        int i = 0;
        String name;
        Date date;
        Admin_Search_For_Shows ex;
        while (i < rows.length) {
            name = (String)jTable.getModel().getValueAt(rows[i],0);
            date = (Date)jTable.getModel().getValueAt(rows[i], 2);
            Connection con = null;
            System.out.println(date);
            System.out.println(name);
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                Statement myStmt = null;
                ResultSet myRs = null;
                myStmt = con.createStatement();
                String query = " delete from Shows where Name = ? AND ShowTime = ?";

                // create the mysql insert preparedstatement
                PreparedStatement preparedStmt = con.prepareStatement(query);
                preparedStmt.setString (1, name);
                preparedStmt.setObject (2, date);
                // execute the preparedstatement
                preparedStmt.execute();
                
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
            i++;
        }
        fillValues();
    }//GEN-LAST:event_jButton1_remove_showActionPerformed

    private void jButton1_search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_search1ActionPerformed
        boolean search_name = jCheckBox_name.isSelected();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        int name_pos = -1;
        int exhibit_pos = -1;
        int date_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        Date dateTemp = jCalendar_date.getDate();
        date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        //parameters
            
        if (!search_name && !search_exhibit && !search_date){
            JOptionPane.showMessageDialog(null, "Must check a search preference box");

        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` WHERE ";
                if (search_name) {
                    name_pos = numColumns;
                    numColumns++;
                    sql += "Name = ? AND ";
                }
                if (search_date) {
                    date_pos = numColumns;
                    numColumns++;
                    sql += "DATE(ShowTime) = ? AND ";
                }
                if (search_exhibit) {
                    exhibit_pos = numColumns;
                    numColumns++;
                    sql += "ExhibitName = ? AND ";
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_date) {
                    stmt.setObject(date_pos, date);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 3; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("ExhibitName");
                        } else {
                            value = myRs.getObject("ShowTime");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton1_search1ActionPerformed

    private void jButton_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_homeActionPerformed
        Admin_Main main = new Admin_Main();
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton_homeActionPerformed

    private void jButton_name_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_upActionPerformed
        if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        int name_pos = -1;
        int exhibit_pos = -1;
        int date_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        Date dateTemp = jCalendar_date.getDate();
        date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        //parameters
            
        if (!search_name && !search_exhibit && !search_date){
            JOptionPane.showMessageDialog(null, "Must check a search preference box");

        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` WHERE ";
                if (search_name) {
                    name_pos = numColumns;
                    numColumns++;
                    sql += "Name = ? AND ";
                }
                if (search_date) {
                    date_pos = numColumns;
                    numColumns++;
                    sql += "DATE(ShowTime) = ? AND ";
                }
                if (search_exhibit) {
                    exhibit_pos = numColumns;
                    numColumns++;
                    sql += "ExhibitName = ? AND ";
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Name ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_date) {
                    stmt.setObject(date_pos, date);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 3; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("ExhibitName");
                        } else {
                            value = myRs.getObject("ShowTime");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
        try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` ORDER BY Name ASC";
                
                stmt = con.prepareStatement(sql);
                
                
                
                ResultSet myRs = stmt.executeQuery();
                
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("Name");
                    } else if (j == 1) {
                        value = myRs.getString("ExhibitName");
                    } else {
                        value = myRs.getObject("ShowTime");
                    }
                    jTable.getModel().setValueAt(value, i, j);
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }   
        }
    }//GEN-LAST:event_jButton_name_upActionPerformed

    private void jButton_name_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_downActionPerformed
         if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        int name_pos = -1;
        int exhibit_pos = -1;
        int date_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        Date dateTemp = jCalendar_date.getDate();
        date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        //parameters
            
        if (!search_name && !search_exhibit && !search_date){
            JOptionPane.showMessageDialog(null, "Must check a search preference box");

        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` WHERE ";
                if (search_name) {
                    name_pos = numColumns;
                    numColumns++;
                    sql += "Name = ? AND ";
                }
                if (search_date) {
                    date_pos = numColumns;
                    numColumns++;
                    sql += "DATE(ShowTime) = ? AND ";
                }
                if (search_exhibit) {
                    exhibit_pos = numColumns;
                    numColumns++;
                    sql += "ExhibitName = ? AND ";
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Name DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_date) {
                    stmt.setObject(date_pos, date);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 3; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("ExhibitName");
                        } else {
                            value = myRs.getObject("ShowTime");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
        try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` ORDER BY Name DESC";
                
                stmt = con.prepareStatement(sql);
                
                
                
                ResultSet myRs = stmt.executeQuery();
                
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("Name");
                    } else if (j == 1) {
                        value = myRs.getString("ExhibitName");
                    } else {
                        value = myRs.getObject("ShowTime");
                    }
                    jTable.getModel().setValueAt(value, i, j);
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }   
        }
    }//GEN-LAST:event_jButton_name_downActionPerformed

    private void jButton_exhibit_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exhibit_upActionPerformed
         if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        int name_pos = -1;
        int exhibit_pos = -1;
        int date_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        Date dateTemp = jCalendar_date.getDate();
        date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        //parameters
            
        if (!search_name && !search_exhibit && !search_date){
            JOptionPane.showMessageDialog(null, "Must check a search preference box");

        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` WHERE ";
                if (search_name) {
                    name_pos = numColumns;
                    numColumns++;
                    sql += "Name = ? AND ";
                }
                if (search_date) {
                    date_pos = numColumns;
                    numColumns++;
                    sql += "DATE(ShowTime) = ? AND ";
                }
                if (search_exhibit) {
                    exhibit_pos = numColumns;
                    numColumns++;
                    sql += "ExhibitName = ? AND ";
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY ExhibitName ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_date) {
                    stmt.setObject(date_pos, date);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 3; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("ExhibitName");
                        } else {
                            value = myRs.getObject("ShowTime");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
        try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` ORDER BY ExhibitName ASC";
                
                stmt = con.prepareStatement(sql);
                
                
                
                ResultSet myRs = stmt.executeQuery();
                
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("Name");
                    } else if (j == 1) {
                        value = myRs.getString("ExhibitName");
                    } else {
                        value = myRs.getObject("ShowTime");
                    }
                    jTable.getModel().setValueAt(value, i, j);
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }   
        }
    }//GEN-LAST:event_jButton_exhibit_upActionPerformed

    private void jButton_exhibit_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exhibit_downActionPerformed
         if (searchPerformed) {
            boolean search_name = jCheckBox_name.isSelected();
        boolean search_exhibit = jCheckBox_exhibit.isSelected();
        boolean search_date = jCheckBox_date.isSelected();
        int name_pos = -1;
        int exhibit_pos = -1;
        int date_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        String exhibit = "" + jComboBox_exhibit.getSelectedItem();
        Date dateTemp = jCalendar_date.getDate();
        date = new Date(dateTemp.getYear(), dateTemp.getMonth(), dateTemp.getDate());
        //parameters
            
        if (!search_name && !search_exhibit && !search_date){
            JOptionPane.showMessageDialog(null, "Must check a search preference box");

        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` WHERE ";
                if (search_name) {
                    name_pos = numColumns;
                    numColumns++;
                    sql += "Name = ? AND ";
                }
                if (search_date) {
                    date_pos = numColumns;
                    numColumns++;
                    sql += "DATE(ShowTime) = ? AND ";
                }
                if (search_exhibit) {
                    exhibit_pos = numColumns;
                    numColumns++;
                    sql += "ExhibitName = ? AND ";
                }
                //get rid of last AND
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY ExhibitName DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_date) {
                    stmt.setObject(date_pos, date);
                }
                if (search_exhibit) {
                    stmt.setString(exhibit_pos, exhibit);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                searchPerformed = true;
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 3; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getString("ExhibitName");
                        } else {
                            value = myRs.getObject("ShowTime");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
        try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Shows` ORDER BY ExhibitName DESC";
                
                stmt = con.prepareStatement(sql);
                
                
                
                ResultSet myRs = stmt.executeQuery();
                
            //clear table
            for (int i = 0; i < 25; i++) {
                for (int j = 0; j < 3; j++) {
                    jTable.getModel().setValueAt(null, i, j);   
                }
            }
            int i = 0;
            Object value = null;
            while (myRs.next()) {
                System.out.println("Values Found");
                for (int j = 0; j < 3; j++) {
                    if (j == 0) {
                        value = myRs.getString("Name");
                    } else if (j == 1) {
                        value = myRs.getString("ExhibitName");
                    } else {
                        value = myRs.getObject("ShowTime");
                    }
                    jTable.getModel().setValueAt(value, i, j);
                }
                i++; //move to next result
            }
        } catch(Exception e) {
            System.err.println("Exception: " + e.getMessage());
        } finally {
            try {
                if(con != null)
                con.close();
            } catch(SQLException e) {}
        }   
        }
    }//GEN-LAST:event_jButton_exhibit_downActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_Search_For_Shows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_Search_For_Shows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_Search_For_Shows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_Search_For_Shows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_Search_For_Shows().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_remove_show;
    private javax.swing.JButton jButton1_search1;
    private javax.swing.JButton jButton_exhibit_down;
    private javax.swing.JButton jButton_exhibit_up;
    private javax.swing.JButton jButton_home;
    private javax.swing.JButton jButton_name_down;
    private javax.swing.JButton jButton_name_up;
    private com.toedter.calendar.JCalendar jCalendar_date;
    private javax.swing.JCheckBox jCheckBox_date;
    private javax.swing.JCheckBox jCheckBox_exhibit;
    private javax.swing.JCheckBox jCheckBox_name;
    private javax.swing.JComboBox<String> jComboBox_exhibit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextField_name;
    private java.awt.Label text_atlanta_zoo1;
    private java.awt.Label text_date;
    private java.awt.Label text_name;
    private java.awt.Label text_shows;
    private java.awt.Label text_species;
    // End of variables declaration//GEN-END:variables
}
