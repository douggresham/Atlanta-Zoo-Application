
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gresh
 */
public class Visitor_Search_For_Exhibits extends javax.swing.JFrame {
    private String userEmail;
    private boolean searchPerformed;
    /**
     * Creates new form Search_For_Exhibits
     */
    public Visitor_Search_For_Exhibits(String email) {
        initComponents();
        this.userEmail = email;
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        fillValues();
    }
    public void fillValues() {
        Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits`";
                
                stmt = con.prepareStatement(sql);
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_exhibits = new java.awt.Label();
        text_atlanta_zoo = new java.awt.Label();
        jButton_search = new javax.swing.JButton();
        text_min = new java.awt.Label();
        text_num_animals = new java.awt.Label();
        text_name = new java.awt.Label();
        text_size = new java.awt.Label();
        text_max = new java.awt.Label();
        jSpinner_min = new javax.swing.JSpinner();
        jSpinner_max = new javax.swing.JSpinner();
        jCheckBox_water_feature = new javax.swing.JCheckBox();
        jSpinner_min1 = new javax.swing.JSpinner();
        text_min1 = new java.awt.Label();
        text_max1 = new java.awt.Label();
        jSpinner_max1 = new javax.swing.JSpinner();
        jTextField_name = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jButton_view = new javax.swing.JButton();
        jButton_home = new javax.swing.JButton();
        jCheckBox_num_animals = new javax.swing.JCheckBox();
        jCheckBox_water = new javax.swing.JCheckBox();
        jCheckBox_name = new javax.swing.JCheckBox();
        jCheckBox_size = new javax.swing.JCheckBox();
        jButton_name_up = new javax.swing.JButton();
        jButton_name_down = new javax.swing.JButton();
        jButton_size_up = new javax.swing.JButton();
        jButton_size_down = new javax.swing.JButton();
        jButton_num_animals_up = new javax.swing.JButton();
        jButton_num_animals_down = new javax.swing.JButton();
        jButton_water_up = new javax.swing.JButton();
        jButton_water_down = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(840, 505));
        setResizable(false);

        text_exhibits.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_exhibits.setName(""); // NOI18N
        text_exhibits.setText("Exhibits");

        text_atlanta_zoo.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        text_atlanta_zoo.setName(""); // NOI18N
        text_atlanta_zoo.setText("Atlanta Zoo");

        jButton_search.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_search.setText("Search");
        jButton_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_searchMouseClicked(evt);
            }
        });
        jButton_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_searchActionPerformed(evt);
            }
        });

        text_min.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_min.setName(""); // NOI18N
        text_min.setText("Min");

        text_num_animals.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_num_animals.setText("Num Animals");

        text_name.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_name.setText("Name");

        text_size.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_size.setName(""); // NOI18N
        text_size.setText("Size");

        text_max.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_max.setName(""); // NOI18N
        text_max.setText("Max");

        jCheckBox_water_feature.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jCheckBox_water_feature.setSelected(true);
        jCheckBox_water_feature.setText("Water Feature");
        jCheckBox_water_feature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_water_featureActionPerformed(evt);
            }
        });

        text_min1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_min1.setName(""); // NOI18N
        text_min1.setText("Min");

        text_max1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        text_max1.setName(""); // NOI18N
        text_max1.setText("Max");

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Size", "Num Animals", "Water"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setToolTipText("");
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable);

        jButton_view.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton_view.setText("View");
        jButton_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_viewActionPerformed(evt);
            }
        });

        jButton_home.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_home.setText("Home");
        jButton_home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_homeMouseClicked(evt);
            }
        });
        jButton_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_homeActionPerformed(evt);
            }
        });

        jButton_name_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_up.setText("▲");
        jButton_name_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_upActionPerformed(evt);
            }
        });

        jButton_name_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_name_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_name_down.setText("▼");
        jButton_name_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_name_downActionPerformed(evt);
            }
        });

        jButton_size_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_size_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_size_up.setText("▲");
        jButton_size_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_size_upActionPerformed(evt);
            }
        });

        jButton_size_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_size_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_size_down.setText("▼");
        jButton_size_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_size_downActionPerformed(evt);
            }
        });

        jButton_num_animals_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_num_animals_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_num_animals_up.setText("▲");
        jButton_num_animals_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_num_animals_upActionPerformed(evt);
            }
        });

        jButton_num_animals_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_num_animals_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_num_animals_down.setText("▼");
        jButton_num_animals_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_num_animals_downActionPerformed(evt);
            }
        });

        jButton_water_up.setBackground(new java.awt.Color(255, 255, 255));
        jButton_water_up.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_water_up.setText("▲");
        jButton_water_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_water_upActionPerformed(evt);
            }
        });

        jButton_water_down.setBackground(new java.awt.Color(255, 255, 255));
        jButton_water_down.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton_water_down.setText("▼");
        jButton_water_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_water_downActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton_view)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jCheckBox_name)
                                .addGap(17, 17, 17))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jCheckBox_size)
                                .addGap(6, 6, 6)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_home))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(text_atlanta_zoo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(text_exhibits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(text_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(text_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jSpinner_min, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(27, 27, 27)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jSpinner_max, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(text_max, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(108, 108, 108)
                                                .addComponent(jButton_size_up)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton_size_down)
                                                .addGap(43, 43, 43)
                                                .addComponent(jButton_num_animals_up)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton_num_animals_down)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCheckBox_num_animals)
                                        .addGap(29, 29, 29))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(text_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jButton_name_up)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_name_down)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(text_num_animals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSpinner_min1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSpinner_max1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(159, 159, 159)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(text_min1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(40, 40, 40)
                                                .addComponent(text_max1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jButton_search)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(59, 59, 59)
                                        .addComponent(jButton_water_up)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_water_down)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox_water)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox_water_feature)
                                .addGap(140, 140, 140))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(text_atlanta_zoo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(text_exhibits, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton_search)
                        .addGap(39, 39, 39)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(text_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(text_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(text_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinner_min, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(text_min1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(text_max1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSpinner_max1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner_min1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBox_num_animals)
                                .addComponent(text_num_animals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBox_name)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(text_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jCheckBox_water_feature)
                                .addComponent(jCheckBox_water))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jCheckBox_size)))
                        .addGap(9, 9, 9)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton_name_up)
                                .addComponent(jButton_name_down))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton_size_up)
                                .addComponent(jButton_size_down))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton_num_animals_up)
                                .addComponent(jButton_num_animals_down))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_water_up)
                            .addComponent(jButton_water_down))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(32, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton_view)
                        .addGap(130, 130, 130))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton_home)
                        .addGap(35, 35, 35))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox_water_featureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_water_featureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox_water_featureActionPerformed

    private void jButton_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_searchActionPerformed

    private void jButton_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_searchMouseClicked

        boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    searchPerformed = true;
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("Name");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_searchMouseClicked

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableMouseClicked

    private void jButton_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_viewActionPerformed
        int[] rows = jTable.getSelectedRows();
        int i = 0;
        String name;
        int num;
        Visitor_Exhibit_Detail ex;
        while (i < rows.length) {
            name = (String)jTable.getModel().getValueAt(rows[i],0);
            num = (int)jTable.getModel().getValueAt(rows[i], 2);
            //display exhibit detail screen and pass name
            ex = new Visitor_Exhibit_Detail(userEmail, name, num);
            ex.setVisible(true);
            i++;
        }
        if (rows.length > 0) {
            this.dispose();
        }
        
    }//GEN-LAST:event_jButton_viewActionPerformed

    private void jButton_homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_homeMouseClicked
        Visitor_Main main = new Visitor_Main(userEmail);
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton_homeMouseClicked

    private void jButton_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_homeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_homeActionPerformed

    private void jButton_name_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_upActionPerformed
         if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Name ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("Name");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` ORDER BY Name ASC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_name_upActionPerformed

    private void jButton_name_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_name_downActionPerformed
         if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Name DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("Name");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` ORDER BY Name DESC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_name_downActionPerformed

    private void jButton_size_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_size_upActionPerformed
         if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Size ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("Name");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` ORDER BY Size ASC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_size_upActionPerformed

    private void jButton_size_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_size_downActionPerformed
         if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY Size DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("Name");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` ORDER BY Size DESC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_size_downActionPerformed

    private void jButton_num_animals_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_num_animals_upActionPerformed
         if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT Name as eName, Size, WaterFeature, (SELECT Count(Name) FROM Animals WHERE ExhibitName=eName) FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "eName = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY NumAnimals ASC;";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("eName");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("eName");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT Name as eName, Size, WaterFeature, (SELECT Count(Name) FROM Animals WHERE ExhibitName=eName) as NumAnimals FROM Exhibits ORDER BY NumAnimals ASC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("eName");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("eName");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_num_animals_upActionPerformed

    private void jButton_num_animals_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_num_animals_downActionPerformed
        if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT Name as eName, Size, WaterFeature, (SELECT Count(Name) FROM Animals WHERE ExhibitName=eName) FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "eName = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY NumAnimals DESC;";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("eName");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("eName");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT Name as eName, Size, WaterFeature, (SELECT Count(Name) FROM Animals WHERE ExhibitName=eName) as NumAnimals FROM Exhibits ORDER BY NumAnimals DESC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("eName");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("eName");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_num_animals_downActionPerformed

    private void jButton_water_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_water_upActionPerformed
        if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY WaterFeature ASC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("Name");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` ORDER BY WaterFeature ASC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_water_upActionPerformed

    private void jButton_water_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_water_downActionPerformed
        if (searchPerformed) {
           boolean search_name = jCheckBox_name.isSelected();
        boolean search_size = jCheckBox_size.isSelected();
        boolean search_num_animals = jCheckBox_num_animals.isSelected();
        boolean search_water = jCheckBox_water.isSelected();
        int name_pos = -1;
        int size_pos = -1;
        int num_animals_pos = -1;
        int water_pos = -1;
        int numColumns = 1;
        String name = new String(jTextField_name.getText());
        int min_size = (int)jSpinner_min.getValue();
        int max_size = (int)jSpinner_max.getValue();
        int min_num_animals = (int)jSpinner_min1.getValue();
        int max_num_animals = (int)jSpinner_max1.getValue();
        String water = "False";
        if (jCheckBox_water_feature.isSelected()) {
            water = "True";
        }
        
        //parameters
        if (min_size > max_size) {
            JOptionPane.showMessageDialog(null, "Min size must be smaller than max size");
        } else if (min_size < 0) {
            JOptionPane.showMessageDialog(null, "Min size must be greater than 0");
        } else if (min_num_animals > max_num_animals) {
            JOptionPane.showMessageDialog(null, "Min num animals must be smaller than the max");
        } else if (min_num_animals < 0) {
            JOptionPane.showMessageDialog(null, "Min num animals must be greater than 0");
        } else if (!search_name && !search_size && !search_water && !search_num_animals) {
             JOptionPane.showMessageDialog(null, "Must check a search preference box");
        } else {
            
        
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` WHERE ";
                if (search_name) {
                    sql += "Name = ? AND ";
                    name_pos = numColumns;
                    numColumns++;
                }
                if (search_size) {
                    sql += "Size >= ? AND Size <= ? AND ";
                    size_pos = numColumns;
                    numColumns+=2;
                }
                if (search_water) {
                    sql += "WaterFeature = ? AND ";
                    water_pos = numColumns;
                    numColumns++;
                }
                sql = sql.substring(0, sql.length() - 5);
                sql += "ORDER BY WaterFeature DESC";
                stmt = con.prepareStatement(sql);
                if (search_name) {
                    stmt.setString(name_pos, name);
                }
                if (search_size) {
                    stmt.setInt(size_pos, min_size);
                    stmt.setInt(size_pos + 1, max_size);    
                }
                if (search_water) {
                    stmt.setString(water_pos, water);
                }
                
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, name);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    if (num >= min_num_animals && num <= max_num_animals || !search_num_animals) {
                        for (int j = 0; j < 4; j++) {
                            if (j == 0) {
                                value = myRs.getString("Name");
                            } else if (j == 1) {
                                value = myRs.getInt("Size");
                            } else if (j == 2) {
                                value = num;
                            } else {
                                value = myRs.getString("WaterFeature");
                            }
                            jTable.getModel().setValueAt(value, i, j);
                        }
                    }
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
        } else {
            Connection con = null;
            try {
                Class.forName("com.mysql.jdbc.Driver").newInstance();
                con = DriverManager.getConnection("jdbc:mysql://academic-mysql.cc.gatech.edu/cs4400_group8",
                "cs4400_group8",
                "l5sU95me");
                PreparedStatement stmt;
                String sql = "SELECT * FROM `Exhibits` ORDER BY WaterFeature DESC";
                
                stmt = con.prepareStatement(sql);
                System.out.println(stmt);
                
                ResultSet myRs = stmt.executeQuery();
                //clear table
                for (int i = 0; i < 25; i++) {
                    for (int j = 0; j < 4; j++) {
                        jTable.getModel().setValueAt(null, i, j);   
                    }
                }
                int i = 0;
                Object value = null;
                while (myRs.next()) {
                    String exhibitName = myRs.getString("Name");
                    //check for number of animals
                    PreparedStatement animStmt = null;
                    String animSql = "select Count(Name) from Animals where ExhibitName=?";
                    animStmt = con.prepareStatement(animSql);
                    animStmt.setString(1, exhibitName);
                    ResultSet animRs = animStmt.executeQuery();
                    animRs.next();
                    String temp = animRs.getString(1);
                    int num = Integer.parseInt(temp);
                    
                    for (int j = 0; j < 4; j++) {
                        if (j == 0) {
                            value = myRs.getString("Name");
                        } else if (j == 1) {
                            value = myRs.getInt("Size");
                        } else if (j == 2) {
                            value = num;
                        } else {
                            value = myRs.getString("WaterFeature");
                        }
                        jTable.getModel().setValueAt(value, i, j);
                    }
                    
                    i++; //move to next result
                }
            } catch(Exception e) {
                System.err.println("Exception: " + e.getMessage());
            } finally {
                try {
                    if(con != null)
                    con.close();
                } catch(SQLException e) {}
            } 
        }
    }//GEN-LAST:event_jButton_water_downActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Exhibits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Exhibits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Exhibits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visitor_Search_For_Exhibits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visitor_Search_For_Exhibits("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_home;
    private javax.swing.JButton jButton_name_down;
    private javax.swing.JButton jButton_name_up;
    private javax.swing.JButton jButton_num_animals_down;
    private javax.swing.JButton jButton_num_animals_up;
    private javax.swing.JButton jButton_search;
    private javax.swing.JButton jButton_size_down;
    private javax.swing.JButton jButton_size_up;
    private javax.swing.JButton jButton_view;
    private javax.swing.JButton jButton_water_down;
    private javax.swing.JButton jButton_water_up;
    private javax.swing.JCheckBox jCheckBox_name;
    private javax.swing.JCheckBox jCheckBox_num_animals;
    private javax.swing.JCheckBox jCheckBox_size;
    private javax.swing.JCheckBox jCheckBox_water;
    private javax.swing.JCheckBox jCheckBox_water_feature;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_max;
    private javax.swing.JSpinner jSpinner_max1;
    private javax.swing.JSpinner jSpinner_min;
    private javax.swing.JSpinner jSpinner_min1;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextField_name;
    private java.awt.Label text_atlanta_zoo;
    private java.awt.Label text_exhibits;
    private java.awt.Label text_max;
    private java.awt.Label text_max1;
    private java.awt.Label text_min;
    private java.awt.Label text_min1;
    private java.awt.Label text_name;
    private java.awt.Label text_num_animals;
    private java.awt.Label text_size;
    // End of variables declaration//GEN-END:variables
}
